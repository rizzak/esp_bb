from umqtt.robust import MQTTClientfrom temperature import TemperatureSensorclass TemperatureClient:    """    Represents an MQTT client which publishes temperature data on an interval    """    def __init__(self, client_id, server, pin, topic=None, **kwargs):        """        Instantiates a TemperatureSensor and MQTTClient; connects to the        MQTT broker.        Arguments `server` and `client_id` are required.        :param client_id: Unique MQTT client ID        :type client_id: str        :param server: MQTT broker domain name / IP        :type server: str        :param pin: 1-Wire bus pin        :type pin: int        :param fahrenheit: Whether or not to publish temperature in Fahrenheit        :type fahrenheit: bool        :param topic: Topic to publish temperature on        :type topic: str        :param kwargs: Arguments for MQTTClient constructor        """        self.sensor = TemperatureSensor(pin)        self.client = MQTTClient(client_id, server, **kwargs)        if not topic:            self.topic = 'devices/%s/temperature/degrees' % \                         self.client.client_id        else:            self.topic = topic        self.client.connect()    def publishTemperature(self):        """        Reads the current temperature and publishes it on the configured topic.        """        t = self.sensor.read_temp()        self.client.publish(self.topic, str(t))    def start(self, interval=60):        """        Begins to publish temperature data on an interval (in seconds).        This function will not exit! Consider using deep sleep instead.        :param interval: How often to publish temperature data (60s default)        :type interval: int        """        import machine        import utime                led2 = machine.Pin(2, machine.Pin.OUT)            while True:            led2.off()            utime.sleep(0.1)            led2.on()            utime.sleep(0.2)            led2.off()            utime.sleep(0.1)            led2.on()            self.publishTemperature()            utime.sleep(interval)